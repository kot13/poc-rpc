#!/usr/bin/env php
<?php
date_default_timezone_set("Europe/Moscow");

include_once __DIR__ . '/vendor/autoload.php';

class Cli
{
    /**
     * Current contract version
     */
    const CONTRACT_VERSION = 1;

    /**
     * int exit code - all went well
     */
    const EXIT_CODE_OK = 0;

    /**
     * int exit code - incorrect CLI arguments list
     */
    const EXIT_CODE_ARGS_LIST = 10;

    /**
     * int exit code - some kind of file/DB access error
     */
    const EXIT_CODE_ACCESS_ERROR = 11;

    /**
     * Path to contracts dir
     */
    const CONTRACTS_PATH = __DIR__ . '/app/contracts';

    /**
     * Path to api actions
     */
    const API_ACTIONS_PATH = __DIR__ . '/app/src/Actions/Api';

    /**
     * Path to api template
     */
    const TEMPLATE_PATH = __DIR__ . '/app/src/Actions/Api/.template';

    /**
     * @var array copy of system's argv
     */
    private $args;

    /**
     * Cli constructor.
     *
     * @param $args
     */
    function __construct($args)
    {
        $this->args = $args;
    }

    /**
     * Main function - class's entry point
     *
     * @return int
     */
    public function run()
    {
        if (count($this->args) <= 1) {
            $this->help();
            return static::EXIT_CODE_ARGS_LIST;
        }

        switch ($this->args[1]) {
            case 'generate':
                return $this->runGenerate();
                break;

            case 'runTests':
                return $this->runTests();
                break;

            case 'help':
            case '--help':
            default:
                $this->help();
                return static::EXIT_CODE_OK;
        }
    }

    /**
     * Display usage/help screen
     */
    private function help()
    {
        echo PHP_EOL;
        echo "syntaxis: php cli <command> [<args>]", PHP_EOL;
        echo PHP_EOL;
        echo "Commands: ", PHP_EOL;
        echo "php cli --help                             -->   Displays the help menu.",          PHP_EOL;
        echo "php cli generate                           -->   Generate endpoints by contracts.", PHP_EOL;
        echo "php cli runTests <args>                    -->   Run test suite.",                  PHP_EOL;
        echo PHP_EOL;
    }

    /**
     * @return int
     */
    private function runGenerate()
    {
        if (!is_writeable(self::API_ACTIONS_PATH)) {
            echo 'The directory ' . self::API_ACTIONS_PATH . ' is not writable'.PHP_EOL;
            return static::EXIT_CODE_ACCESS_ERROR;
        }

        if (false === file_exists(self::TEMPLATE_PATH)) {
            echo 'The template file ' . self::TEMPLATE_PATH . ' not found'.PHP_EOL;
            return static::EXIT_CODE_ACCESS_ERROR;
        };

        // Scan
        $path  = self::CONTRACTS_PATH;
        $scans = $this->scanContracts($path);
        foreach ($scans as $version => $methods) {
            $className  = strtoupper($version);
            $baseName   = $className . '.php';

            ob_start();
            include(self::TEMPLATE_PATH);
            $contents = ob_get_clean();

            if (false === file_put_contents(self::API_ACTIONS_PATH . '/' . $baseName, $contents)) {
                echo 'The file ' . $baseName . ' could not be written to'.PHP_EOL;
                return static::EXIT_CODE_ACCESS_ERROR;
            };
        }

        echo "Generate completed".PHP_EOL;
        return static::EXIT_CODE_OK;
    }

    private function runTests()
    {
        $path  = self::CONTRACTS_PATH;
        $scans = $this->scanContracts($path);
        foreach ($scans as $version => $methods) {
            foreach ($methods as $method => $properties) {
                // TODO: написать запуск тестов
                echo 'Successful `'.$properties['contractPath'].'` contract testing'.PHP_EOL;
            }
        }

        echo "Testing complete".PHP_EOL;
        return static::EXIT_CODE_OK;
    }

    /**
     * @param string $path
     * @return array
     */
    private function scanContracts($path)
    {
        $scans = [];

        $versions = array_diff(scandir($path), ['..', '.']);
        foreach ($versions as $version) {
            $extensions = array_diff(scandir($path . '/' . $version), ['..', '.']);

            foreach ($extensions as $extension) {
                $contracts = array_diff(scandir($path . '/' . $version . '/' . $extension), ['..', '.']);

                foreach ($contracts as $contract) {
                    $contractPath = $path . '/' . $version . '/' . $extension . '/' . $contract;
                    $data         = file_get_contents($contractPath);
                    $data         = json_decode($data, true);

                    if ($data['contract_version'] != self::CONTRACT_VERSION) {
                        continue;
                    }

                    $methodName = 'App\Handlers\\'.ucfirst($version).'\\'.ucfirst($extension).'\\'.ucfirst(str_replace(".json", "", $contract));

                    $data['contractPath'] = $contractPath;

                    $scans[$version][$methodName] = $data;
                }
            }
        }

        return $scans;
    }
}

$cli = new Cli($argv);
exit ($cli->run());


